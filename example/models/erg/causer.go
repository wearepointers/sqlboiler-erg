// Generated by sqlboiler-erg: DO NOT EDIT.
package erg

import (
	"github.com/wearepointers/sqlboiler-erg/example/models/dm"
)

type Causer struct {
	ID              string  `json:"id" toml:"id" yaml:"id"`
	AccountID       *string `json:"accountId,omitempty" toml:"account_id" yaml:"account_id"`
	SystemAccountID *string `json:"systemAccountId,omitempty" toml:"system_account_id" yaml:"system_account_id"`
	CauserType      string  `json:"causerType" toml:"causer_type" yaml:"causer_type"`

	Account           *Account       `json:"account,omitempty" toml:"account" yaml:"account"`
	SystemAccount     *SystemAccount `json:"systemAccount,omitempty" toml:"system_account" yaml:"system_account"`
	CreatedByAccounts AccountSlice   `json:"createdByAccounts,omitempty" toml:"created_by_accounts" yaml:"created_by_accounts"`
}

type CauserSlice []*Causer

func ToCausers(a dm.CauserSlice, exclude ...string) CauserSlice {
	s := make(CauserSlice, len(a))
	for i, d := range a {
		s[i] = ToCauser(d, exclude...)
	}
	return s
}

func ToCauser(a *dm.Causer, exclude ...string) *Causer {
	p := Causer{
		ID:              a.ID,
		AccountID:       nullDotStringToStringPtr(a.AccountID),
		SystemAccountID: nullDotStringToStringPtr(a.SystemAccountID),
		CauserType:      a.CauserType,
	}

	if a.R != nil {
		if a.R.Account != nil && doesNotContain(exclude, "causer.account") {
			p.Account = ToAccount(a.R.Account, append(exclude, "account.causer")...)
		}
		if a.R.SystemAccount != nil && doesNotContain(exclude, "causer.system_account") {
			p.SystemAccount = ToSystemAccount(a.R.SystemAccount, append(exclude, "system_account.causer")...)
		}
		if a.R.CreatedByAccounts != nil && doesNotContain(exclude, "causer.account") {
			p.CreatedByAccounts = ToAccounts(a.R.CreatedByAccounts, append(exclude, "account.causer")...)
		}
	}

	return &p
}
