// Generated by sqlboiler-erg: DO NOT EDIT.
package erg

import (
	"github.com/wearepointers/sqlboiler-erg/example/models/dm"
	"sync"
)

type causerBeforeHook func(*dm.Causer)
type causerAfterHook func(*Causer)

var causerBeforeMu sync.Mutex
var causerBeforeHooks []causerBeforeHook

var causerAfterMu sync.Mutex
var causerAfterHooks []causerAfterHook

func AddCauserBeforeHook(hook causerBeforeHook) {
	causerBeforeMu.Lock()
	causerBeforeHooks = append(causerBeforeHooks, hook)
	causerBeforeMu.Unlock()
}

func AddCauserAfterHook(hook causerAfterHook) {
	causerAfterMu.Lock()
	causerAfterHooks = append(causerAfterHooks, hook)
	causerAfterMu.Unlock()
}

type Causer struct {
	*dm.Causer

	Account           *Account       `json:"account,omitempty" toml:"account" yaml:"account"`
	SystemAccount     *SystemAccount `json:"systemAccount,omitempty" toml:"system_account" yaml:"system_account"`
	CreatedByAccounts AccountSlice   `json:"createdByAccounts,omitempty" toml:"created_by_accounts" yaml:"created_by_accounts"`
}

type CauserSlice []*Causer

func ToCausers(a dm.CauserSlice, exclude ...string) CauserSlice {
	s := make(CauserSlice, len(a))
	for i, d := range a {
		s[i] = ToCauser(d, exclude...)
	}
	return s
}

func ToCauser(a *dm.Causer, exclude ...string) *Causer {
	for _, doBeforeHook := range causerBeforeHooks {
		doBeforeHook(a)
	}

	p := Causer{
		Causer: a,
	}

	for _, doAfterHook := range causerAfterHooks {
		doAfterHook(&p)
	}

	if a.R != nil {
		if a.R.Account != nil && doesNotContain(exclude, "causer.account") {
			p.Account = ToAccount(a.R.Account, append(exclude, "account.causer")...)
		}
		if a.R.SystemAccount != nil && doesNotContain(exclude, "causer.system_account") {
			p.SystemAccount = ToSystemAccount(a.R.SystemAccount, append(exclude, "system_account.causer")...)
		}
		if a.R.CreatedByAccounts != nil && doesNotContain(exclude, "causer.account") {
			p.CreatedByAccounts = ToAccounts(a.R.CreatedByAccounts, append(exclude, "account.causer")...)
		}
	}

	return &p
}
