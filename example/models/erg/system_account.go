// Generated by sqlboiler-erg: DO NOT EDIT.
package erg

import (
	"github.com/wearepointers/sqlboiler-erg/example/models/dm"
	"sync"
)

type systemAccountBeforeHook func(*dm.SystemAccount)
type systemAccountAfterHook func(*SystemAccount)

var systemAccountBeforeMu sync.Mutex
var systemAccountBeforeHooks []systemAccountBeforeHook

var systemAccountAfterMu sync.Mutex
var systemAccountAfterHooks []systemAccountAfterHook

func AddSystemAccountBeforeHook(hook systemAccountBeforeHook) {
	systemAccountBeforeMu.Lock()
	systemAccountBeforeHooks = append(systemAccountBeforeHooks, hook)
	systemAccountBeforeMu.Unlock()
}

func AddSystemAccountAfterHook(hook systemAccountAfterHook) {
	systemAccountAfterMu.Lock()
	systemAccountAfterHooks = append(systemAccountAfterHooks, hook)
	systemAccountAfterMu.Unlock()
}

type SystemAccount struct {
	*dm.SystemAccount

	Causers CauserSlice `json:"causers,omitempty" toml:"causers" yaml:"causers"`
}

type SystemAccountSlice []*SystemAccount

func ToSystemAccounts(a dm.SystemAccountSlice, exclude ...string) SystemAccountSlice {
	s := make(SystemAccountSlice, len(a))
	for i, d := range a {
		s[i] = ToSystemAccount(d, exclude...)
	}
	return s
}

func ToSystemAccount(a *dm.SystemAccount, exclude ...string) *SystemAccount {
	for _, doBeforeHook := range systemAccountBeforeHooks {
		doBeforeHook(a)
	}

	p := SystemAccount{
		SystemAccount: a,
	}

	for _, doAfterHook := range systemAccountAfterHooks {
		doAfterHook(&p)
	}

	if a.R != nil {
		if a.R.Causers != nil && doesNotContain(exclude, "system_account.causer") {
			p.Causers = ToCausers(a.R.Causers, append(exclude, "causer.system_account")...)
		}
	}

	return &p
}
