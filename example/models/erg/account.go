// Generated by sqlboiler-erg: DO NOT EDIT.
package erg

import (
	"github.com/wearepointers/sqlboiler-erg/example/models/dm"
	"sync"
)

type accountBeforeHook func(*dm.Account)
type accountAfterHook func(*Account)

var accountBeforeMu sync.Mutex
var accountBeforeHooks []accountBeforeHook

var accountAfterMu sync.Mutex
var accountAfterHooks []accountAfterHook

func AddAccountBeforeHook(hook accountBeforeHook) {
	accountBeforeMu.Lock()
	accountBeforeHooks = append(accountBeforeHooks, hook)
	accountBeforeMu.Unlock()
}

func AddAccountAfterHook(hook accountAfterHook) {
	accountAfterMu.Lock()
	accountAfterHooks = append(accountAfterHooks, hook)
	accountAfterMu.Unlock()
}

type Account struct {
	*dm.Account

	CreatedByCauser *Causer     `json:"createdByCauser,omitempty" toml:"created_by_causer" yaml:"created_by_causer"`
	Causers         CauserSlice `json:"causers,omitempty" toml:"causers" yaml:"causers"`
}

type AccountSlice []*Account

func ToAccounts(a dm.AccountSlice, exclude ...string) AccountSlice {
	s := make(AccountSlice, len(a))
	for i, d := range a {
		s[i] = ToAccount(d, exclude...)
	}
	return s
}

func ToAccount(a *dm.Account, exclude ...string) *Account {
	for _, doBeforeHook := range accountBeforeHooks {
		doBeforeHook(a)
	}

	p := Account{
		Account: a,
	}

	for _, doAfterHook := range accountAfterHooks {
		doAfterHook(&p)
	}

	if a.R != nil {
		if a.R.CreatedByCauser != nil && doesNotContain(exclude, "account.causer") {
			p.CreatedByCauser = ToCauser(a.R.CreatedByCauser, append(exclude, "causer.account")...)
		}
		if a.R.Causers != nil && doesNotContain(exclude, "account.causer") {
			p.Causers = ToCausers(a.R.Causers, append(exclude, "causer.account")...)
		}
	}

	return &p
}
