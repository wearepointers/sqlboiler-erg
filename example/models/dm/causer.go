// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Causer is an object representing the database table.
type Causer struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID       null.String `boil:"account_id" json:"accountID,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	SystemAccountID null.String `boil:"system_account_id" json:"systemAccountID,omitempty" toml:"system_account_id" yaml:"system_account_id,omitempty"`
	CauserType      string      `boil:"causer_type" json:"causerType" toml:"causer_type" yaml:"causer_type"`

	R *causerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L causerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CauserColumns = struct {
	ID              string
	AccountID       string
	SystemAccountID string
	CauserType      string
}{
	ID:              "id",
	AccountID:       "account_id",
	SystemAccountID: "system_account_id",
	CauserType:      "causer_type",
}

var CauserTableColumns = struct {
	ID              string
	AccountID       string
	SystemAccountID string
	CauserType      string
}{
	ID:              "causer.id",
	AccountID:       "causer.account_id",
	SystemAccountID: "causer.system_account_id",
	CauserType:      "causer.causer_type",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CauserWhere = struct {
	ID              whereHelperstring
	AccountID       whereHelpernull_String
	SystemAccountID whereHelpernull_String
	CauserType      whereHelperstring
}{
	ID:              whereHelperstring{field: "\"causer\".\"id\""},
	AccountID:       whereHelpernull_String{field: "\"causer\".\"account_id\""},
	SystemAccountID: whereHelpernull_String{field: "\"causer\".\"system_account_id\""},
	CauserType:      whereHelperstring{field: "\"causer\".\"causer_type\""},
}

// CauserRels is where relationship names are stored.
var CauserRels = struct {
	Account           string
	SystemAccount     string
	CreatedByAccounts string
}{
	Account:           "Account",
	SystemAccount:     "SystemAccount",
	CreatedByAccounts: "CreatedByAccounts",
}

// causerR is where relationships are stored.
type causerR struct {
	Account           *Account       `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	SystemAccount     *SystemAccount `boil:"SystemAccount" json:"SystemAccount" toml:"SystemAccount" yaml:"SystemAccount"`
	CreatedByAccounts AccountSlice   `boil:"CreatedByAccounts" json:"CreatedByAccounts" toml:"CreatedByAccounts" yaml:"CreatedByAccounts"`
}

// NewStruct creates a new relationship struct
func (*causerR) NewStruct() *causerR {
	return &causerR{}
}

func (r *causerR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *causerR) GetSystemAccount() *SystemAccount {
	if r == nil {
		return nil
	}
	return r.SystemAccount
}

func (r *causerR) GetCreatedByAccounts() AccountSlice {
	if r == nil {
		return nil
	}
	return r.CreatedByAccounts
}

// causerL is where Load methods for each relationship are stored.
type causerL struct{}

var (
	causerAllColumns            = []string{"id", "account_id", "system_account_id", "causer_type"}
	causerColumnsWithoutDefault = []string{"causer_type"}
	causerColumnsWithDefault    = []string{"id", "account_id", "system_account_id"}
	causerPrimaryKeyColumns     = []string{"id"}
	causerGeneratedColumns      = []string{}
)

type (
	// CauserSlice is an alias for a slice of pointers to Causer.
	// This should almost always be used instead of []Causer.
	CauserSlice []*Causer
	// CauserHook is the signature for custom Causer hook methods
	CauserHook func(context.Context, boil.ContextExecutor, *Causer) error

	causerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	causerType                 = reflect.TypeOf(&Causer{})
	causerMapping              = queries.MakeStructMapping(causerType)
	causerPrimaryKeyMapping, _ = queries.BindMapping(causerType, causerMapping, causerPrimaryKeyColumns)
	causerInsertCacheMut       sync.RWMutex
	causerInsertCache          = make(map[string]insertCache)
	causerUpdateCacheMut       sync.RWMutex
	causerUpdateCache          = make(map[string]updateCache)
	causerUpsertCacheMut       sync.RWMutex
	causerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var causerAfterSelectMu sync.Mutex
var causerAfterSelectHooks []CauserHook

var causerBeforeInsertMu sync.Mutex
var causerBeforeInsertHooks []CauserHook
var causerAfterInsertMu sync.Mutex
var causerAfterInsertHooks []CauserHook

var causerBeforeUpdateMu sync.Mutex
var causerBeforeUpdateHooks []CauserHook
var causerAfterUpdateMu sync.Mutex
var causerAfterUpdateHooks []CauserHook

var causerBeforeDeleteMu sync.Mutex
var causerBeforeDeleteHooks []CauserHook
var causerAfterDeleteMu sync.Mutex
var causerAfterDeleteHooks []CauserHook

var causerBeforeUpsertMu sync.Mutex
var causerBeforeUpsertHooks []CauserHook
var causerAfterUpsertMu sync.Mutex
var causerAfterUpsertHooks []CauserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Causer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Causer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Causer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Causer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Causer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Causer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Causer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Causer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Causer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range causerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCauserHook registers your hook function for all future operations.
func AddCauserHook(hookPoint boil.HookPoint, causerHook CauserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		causerAfterSelectMu.Lock()
		causerAfterSelectHooks = append(causerAfterSelectHooks, causerHook)
		causerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		causerBeforeInsertMu.Lock()
		causerBeforeInsertHooks = append(causerBeforeInsertHooks, causerHook)
		causerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		causerAfterInsertMu.Lock()
		causerAfterInsertHooks = append(causerAfterInsertHooks, causerHook)
		causerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		causerBeforeUpdateMu.Lock()
		causerBeforeUpdateHooks = append(causerBeforeUpdateHooks, causerHook)
		causerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		causerAfterUpdateMu.Lock()
		causerAfterUpdateHooks = append(causerAfterUpdateHooks, causerHook)
		causerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		causerBeforeDeleteMu.Lock()
		causerBeforeDeleteHooks = append(causerBeforeDeleteHooks, causerHook)
		causerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		causerAfterDeleteMu.Lock()
		causerAfterDeleteHooks = append(causerAfterDeleteHooks, causerHook)
		causerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		causerBeforeUpsertMu.Lock()
		causerBeforeUpsertHooks = append(causerBeforeUpsertHooks, causerHook)
		causerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		causerAfterUpsertMu.Lock()
		causerAfterUpsertHooks = append(causerAfterUpsertHooks, causerHook)
		causerAfterUpsertMu.Unlock()
	}
}

// One returns a single causer record from the query.
func (q causerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Causer, error) {
	o := &Causer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: failed to execute a one query for causer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Causer records from the query.
func (q causerQuery) All(ctx context.Context, exec boil.ContextExecutor) (CauserSlice, error) {
	var o []*Causer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dm: failed to assign all query results to Causer slice")
	}

	if len(causerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Causer records in the query.
func (q causerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to count causer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q causerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dm: failed to check if causer exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *Causer) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// SystemAccount pointed to by the foreign key.
func (o *Causer) SystemAccount(mods ...qm.QueryMod) systemAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SystemAccountID),
	}

	queryMods = append(queryMods, mods...)

	return SystemAccounts(queryMods...)
}

// CreatedByAccounts retrieves all the account's Accounts with an executor via created_by column.
func (o *Causer) CreatedByAccounts(mods ...qm.QueryMod) accountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"account\".\"created_by\"=?", o.ID),
	)

	return Accounts(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (causerL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCauser interface{}, mods queries.Applicator) error {
	var slice []*Causer
	var object *Causer

	if singular {
		var ok bool
		object, ok = maybeCauser.(*Causer)
		if !ok {
			object = new(Causer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCauser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCauser))
			}
		}
	} else {
		s, ok := maybeCauser.(*[]*Causer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCauser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCauser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &causerR{}
		}
		if !queries.IsNil(object.AccountID) {
			args[object.AccountID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &causerR{}
			}

			if !queries.IsNil(obj.AccountID) {
				args[obj.AccountID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`account.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.Causers = append(foreign.R.Causers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AccountID, foreign.ID) {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Causers = append(foreign.R.Causers, local)
				break
			}
		}
	}

	return nil
}

// LoadSystemAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (causerL) LoadSystemAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCauser interface{}, mods queries.Applicator) error {
	var slice []*Causer
	var object *Causer

	if singular {
		var ok bool
		object, ok = maybeCauser.(*Causer)
		if !ok {
			object = new(Causer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCauser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCauser))
			}
		}
	} else {
		s, ok := maybeCauser.(*[]*Causer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCauser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCauser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &causerR{}
		}
		if !queries.IsNil(object.SystemAccountID) {
			args[object.SystemAccountID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &causerR{}
			}

			if !queries.IsNil(obj.SystemAccountID) {
				args[obj.SystemAccountID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`system_account`),
		qm.WhereIn(`system_account.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`system_account.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SystemAccount")
	}

	var resultSlice []*SystemAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SystemAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for system_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for system_account")
	}

	if len(systemAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SystemAccount = foreign
		if foreign.R == nil {
			foreign.R = &systemAccountR{}
		}
		foreign.R.Causers = append(foreign.R.Causers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SystemAccountID, foreign.ID) {
				local.R.SystemAccount = foreign
				if foreign.R == nil {
					foreign.R = &systemAccountR{}
				}
				foreign.R.Causers = append(foreign.R.Causers, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (causerL) LoadCreatedByAccounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCauser interface{}, mods queries.Applicator) error {
	var slice []*Causer
	var object *Causer

	if singular {
		var ok bool
		object, ok = maybeCauser.(*Causer)
		if !ok {
			object = new(Causer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCauser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCauser))
			}
		}
	} else {
		s, ok := maybeCauser.(*[]*Causer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCauser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCauser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &causerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &causerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.created_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`account.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByAccounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &accountR{}
			}
			foreign.R.CreatedByCauser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedBy {
				local.R.CreatedByAccounts = append(local.R.CreatedByAccounts, foreign)
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.CreatedByCauser = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the causer to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.Causers.
func (o *Causer) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"causer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, causerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AccountID, related.ID)
	if o.R == nil {
		o.R = &causerR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			Causers: CauserSlice{o},
		}
	} else {
		related.R.Causers = append(related.R.Causers, o)
	}

	return nil
}

// RemoveAccount relationship.
// Sets o.R.Account to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Causer) RemoveAccount(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.AccountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Account = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Causers {
		if queries.Equal(o.AccountID, ri.AccountID) {
			continue
		}

		ln := len(related.R.Causers)
		if ln > 1 && i < ln-1 {
			related.R.Causers[i] = related.R.Causers[ln-1]
		}
		related.R.Causers = related.R.Causers[:ln-1]
		break
	}
	return nil
}

// SetSystemAccount of the causer to the related item.
// Sets o.R.SystemAccount to related.
// Adds o to related.R.Causers.
func (o *Causer) SetSystemAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SystemAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"causer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"system_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, causerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SystemAccountID, related.ID)
	if o.R == nil {
		o.R = &causerR{
			SystemAccount: related,
		}
	} else {
		o.R.SystemAccount = related
	}

	if related.R == nil {
		related.R = &systemAccountR{
			Causers: CauserSlice{o},
		}
	} else {
		related.R.Causers = append(related.R.Causers, o)
	}

	return nil
}

// RemoveSystemAccount relationship.
// Sets o.R.SystemAccount to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Causer) RemoveSystemAccount(ctx context.Context, exec boil.ContextExecutor, related *SystemAccount) error {
	var err error

	queries.SetScanner(&o.SystemAccountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("system_account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SystemAccount = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Causers {
		if queries.Equal(o.SystemAccountID, ri.SystemAccountID) {
			continue
		}

		ln := len(related.R.Causers)
		if ln > 1 && i < ln-1 {
			related.R.Causers[i] = related.R.Causers[ln-1]
		}
		related.R.Causers = related.R.Causers[:ln-1]
		break
	}
	return nil
}

// AddCreatedByAccounts adds the given related objects to the existing relationships
// of the causer, optionally inserting them as new records.
// Appends related to o.R.CreatedByAccounts.
// Sets related.R.CreatedByCauser appropriately.
func (o *Causer) AddCreatedByAccounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Account) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedBy = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"account\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
				strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedBy = o.ID
		}
	}

	if o.R == nil {
		o.R = &causerR{
			CreatedByAccounts: related,
		}
	} else {
		o.R.CreatedByAccounts = append(o.R.CreatedByAccounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountR{
				CreatedByCauser: o,
			}
		} else {
			rel.R.CreatedByCauser = o
		}
	}
	return nil
}

// Causers retrieves all the records using an executor.
func Causers(mods ...qm.QueryMod) causerQuery {
	mods = append(mods, qm.From("\"causer\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"causer\".*"})
	}

	return causerQuery{q}
}

// FindCauser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCauser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Causer, error) {
	causerObj := &Causer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"causer\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, causerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: unable to select from causer")
	}

	if err = causerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return causerObj, err
	}

	return causerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Causer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no causer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(causerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	causerInsertCacheMut.RLock()
	cache, cached := causerInsertCache[key]
	causerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			causerAllColumns,
			causerColumnsWithDefault,
			causerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(causerType, causerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(causerType, causerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"causer\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"causer\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dm: unable to insert into causer")
	}

	if !cached {
		causerInsertCacheMut.Lock()
		causerInsertCache[key] = cache
		causerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Causer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Causer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	causerUpdateCacheMut.RLock()
	cache, cached := causerUpdateCache[key]
	causerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			causerAllColumns,
			causerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dm: unable to update causer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"causer\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, causerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(causerType, causerMapping, append(wl, causerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update causer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by update for causer")
	}

	if !cached {
		causerUpdateCacheMut.Lock()
		causerUpdateCache[key] = cache
		causerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q causerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all for causer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected for causer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CauserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), causerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"causer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, causerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all in causer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected all in update all causer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Causer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dm: no causer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(causerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	causerUpsertCacheMut.RLock()
	cache, cached := causerUpsertCache[key]
	causerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			causerAllColumns,
			causerColumnsWithDefault,
			causerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			causerAllColumns,
			causerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dm: unable to upsert causer, could not build update column list")
		}

		ret := strmangle.SetComplement(causerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(causerPrimaryKeyColumns) == 0 {
				return errors.New("dm: unable to upsert causer, could not build conflict column list")
			}

			conflict = make([]string, len(causerPrimaryKeyColumns))
			copy(conflict, causerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"causer\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(causerType, causerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(causerType, causerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dm: unable to upsert causer")
	}

	if !cached {
		causerUpsertCacheMut.Lock()
		causerUpsertCache[key] = cache
		causerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Causer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Causer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dm: no Causer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), causerPrimaryKeyMapping)
	sql := "DELETE FROM \"causer\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete from causer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by delete for causer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q causerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dm: no causerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from causer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for causer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CauserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(causerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), causerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"causer\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, causerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from causer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for causer")
	}

	if len(causerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Causer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCauser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CauserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CauserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), causerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"causer\".* FROM \"causer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, causerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dm: unable to reload all in CauserSlice")
	}

	*o = slice

	return nil
}

// CauserExists checks if the Causer row exists.
func CauserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"causer\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dm: unable to check if causer exists")
	}

	return exists, nil
}

// Exists checks if the Causer row exists.
func (o *Causer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CauserExists(ctx, exec, o.ID)
}
